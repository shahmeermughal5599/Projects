React.memo

parent ke re-render hone se child re-render hota hai

so children me memo lagate hein ke sirf props k change par re-render ho



//React.useMemo

The React useMemo Hook returns a memoized value.

  const calculation = useMemo(() => expensiveCalculation(count), [count]);

jab count me change hoga tab hi is value ko parhega



The React useCallback Hook returns a memoized callback function.

const addTodo = useCallback(() => {
    setTodos((t) => [...t, "New Todo"]);
  }, [todos]);

        <Todos todos={todos} addTodo={addTodo} />


Try running this and click the count increment button.

You will notice that the Todos component re-renders even when the todos do not change.

Why does this not work? We are using memo, so the Todos component should not re-render since neither the todos state nor the addTodo function are changing when the count is incremented.

This is because of something called "referential equality".

Every time a component re-renders, its functions get recreated. Because of this, the addTodo function has actually changed.



https://www.w3schools.com/react/react_useref.asp

useRef

Does Not Cause Re-renders
Accessing DOM Elements



useImperativeHandle

const ParentComponet = () => {

  const modalRef = useRef(null);
  // customParentComponentFunction();

  modalRef.current.customParentComponentFunction(true);

  //yaha se modal ko set karasakun
  return <ChildrenComponent ref={modalRef} />;
};

const ChildrenComponent = forwardRef((props, ref) => {
  const [isModalOpen, setIsModalOpen] = useState(false);


 
  const customParentComponentFunction = (value = false) => {
    setIsModalOpen(value);
  };

   useImperativeHandle(ref, () => {
     customParentComponentFunction,
   });

});



https://react.dev/reference/react/Suspense
https://react.dev/reference/react/Component#catching-rendering-errors-with-an-error-boundary
higher order component


